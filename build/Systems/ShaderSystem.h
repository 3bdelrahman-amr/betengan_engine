#pragma once
#include"../src/SomeDef.h"
#include"../src/ECS_Definitions.h"
#include"ComponentsDef.h"
#include<filesystem>
#include <iostream>
#include <cassert>
#include"../src/System.h"
//#include<string>
#include<stb/stb_include.h>
#include"../src/Manager.h"
#include"../components/MeshRendererr.h"


class ShaderSystem 
{
    Manager* mng=nullptr;
   
public:
    ShaderSystem(){}
    void create(Entity e, Manager* mangr);
   // void destroy();
    //GLuint getProgramId() { return program; }
    //ShaderSystem(Manager*m): System(m) { //program = 0;
    //}
    //~ShaderSystem() { destroy(); }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    //Cast Class to an OpenGL Object name
   // operator GLuint() const { return program; } // NOLINT: Allow implicit casting for convenience

    //Read shader from file, send it to GPU, compile it then attach it to shader
    bool attach(const std::string& filename, GLenum type, Entity e)const;
    //Link Program (Do this after all shaders are attached)
    bool link(Entity e) const; // NOLINT: link does alter the object state so [[nodiscard]] is unneeded


    ///////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    //Get the location of a uniform variable in the shader
    GLuint getUniformLocation(const string& name, Entity e);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////////////////////////////

    //A group of setter for uniform variables
    //NOTE: It is inefficient to call glGetUniformLocation every frame
    //So it is usually a better option to either cache the location
    //or explicitly define the uniform location in the shader
    void set(const std::string& uniform, GLfloat value, Entity e);
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////


    void set(const std::string& uniform, GLint value, Entity e);
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    void set(const std::string& uniform, GLboolean value, Entity e);
    
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    void set(const std::string& uniform, glm::vec2 value, Entity e);
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    void set(const std::string& uniform, glm::vec3 value, Entity e);
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////

    void set(const std::string& uniform, glm::vec4 value, Entity e);
    ///////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    void set(const std::string& uniform, glm::mat4 value, Entity e, GLboolean transpose = false);
       


    
    ShaderSystem(ShaderSystem const&) = delete;
    ShaderSystem& operator=(ShaderSystem const&) = delete;







};

